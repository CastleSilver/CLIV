import org.apache.tools.ant.filters.ReplaceTokens

buildscript{
	ext {
		springBootVer = '2.4.5'
		querydslVer = '4.4.0'
		querydslPluginVer = '1.0.10'
		springDependencyMgmtVer = '1.0.11'
		springLoadedVer = '1.2.8'
		nodePluginVer = '1.3.1'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
		classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
		classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
		classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version "${springBootVer}"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'com.github.node-gradle.node'


repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url "https://repo.spring.io/libs-release" }
	maven { url "https://repo.maven.apache.org/maven2" }
	maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

group 'com.ssafy'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

node {
	download = true
	version = '14.17.0'
	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/../FE")
}

configurations {
	providedRuntime
}

//task npmInstall(type: NpmTask, overwrite: true) {
//    args = ['install']
//}

//task webpack(type: NpmTask, dependsOn: 'npmInstall') {
//	args = ['run', 'build']
//}
//
//// processResources is a Java task. Run the webpack bundling before this task using the 'build' task in the package.json
//processResources.dependsOn 'webpack'

//set build time and inject value to application.properties
def buildTime() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMdd_HHmm')
	return formattedDate
}

project.ext.set("build.date", buildTime())

processResources {
	with copySpec {
		from "src/main/resources"
		include "**/application*.yml"
		include "**/application*.yaml"
		include "**/application*.properties"
		project.properties.findAll().each {
			prop ->
				if (prop.value != null) {
					filter(ReplaceTokens, tokens: [ (prop.key): String.valueOf(prop.value)])
					filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
					filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
				}
		}
	}
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-websocket")
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	// aws
	implementation("org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE")
	implementation("org.springframework.cloud:spring-cloud-aws-context:2.2.6.RELEASE")
	implementation("org.springframework.cloud:spring-cloud-aws-autoconfigure:2.2.6.RELEASE")
	implementation("com.amazonaws:aws-java-sdk-core:1.12.275")
	implementation("com.amazonaws:aws-java-sdk-s3:1.12.267")

	//Spring Security
	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation("org.springframework.security:spring-security-oauth2-client")
	testImplementation("org.springframework.security:spring-security-test")

	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE")
	runtimeOnly("mysql:mysql-connector-java")
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

	implementation('commons-io:commons-io:2.6')
	implementation("org.apache.commons:commons-collections4:4.4")
	implementation("org.apache.commons:commons-lang3:3.9")


	//STOMP 웹소캣 서버 사이드 테스트를 위한 의존성 추가
	implementation("org.springframework.boot:spring-boot-starter-mustache")
	implementation("org.springframework.boot:spring-boot-starter-websocket")
	//STOMP 관련 프론트 라이브러리
	implementation('org.webjars.bower:jquery:3.3.1')
	implementation('org.webjars:sockjs-client:1.1.2')
	implementation('org.webjars:stomp-websocket:2.3.3-1')
	implementation('org.webjars:webjars-locator:0.30')
	//WebRTC 클라이언트 의존성 추가
	implementation('org.webjars.bower:webrtc-adapter:7.4.0')
	//Kurento (미디어서버) 관련 의존성 추가
	implementation('org.kurento:kurento-client:6.16.0')
	implementation('org.kurento:kurento-utils-js:6.15.0')



	implementation("com.squareup.retrofit2:retrofit:2.7.1")
	implementation("com.squareup.retrofit2:converter-jackson:2.7.1")
	implementation("com.squareup.okhttp3:logging-interceptor:3.9.0")

	implementation("com.google.guava:guava:29.0-jre")
	annotationProcessor("com.google.guava:guava:29.0-jre")

	testImplementation("com.jayway.jsonpath:json-path:2.4.0")

	//jwt
	implementation("com.auth0:java-jwt:3.10.3")
	implementation("io.jsonwebtoken:jjwt-api:0.11.2")
	runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.2")
	runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.2")

	implementation("io.springfox:springfox-swagger2:3.0.0")
	implementation("io.springfox:springfox-swagger-ui:3.0.0")
	implementation("io.springfox:springfox-data-rest:3.0.0")
	implementation("io.springfox:springfox-bean-validators:3.0.0")
	implementation("io.springfox:springfox-boot-starter:3.0.0")
	compile("javax.annotation:javax.annotation-api:1.2")

	implementation("org.projectlombok:lombok:1.18.24")
	annotationProcessor("org.projectlombok:lombok:1.18.24")

	testCompile('org.springframework.boot:spring-boot-starter-test')

	implementation('com.google.code.gson:gson:2.8.7')
	implementation("javax.interceptor:javax.interceptor-api:1.2.2")

	// querydsl
	compile("com.querydsl:querydsl-jpa") // querydsl
	compile("com.querydsl:querydsl-apt") // querydsl
	annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jpa")
	annotationProcessor("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final")
	implementation("com.querydsl:querydsl-jpa:${querydslVer}")
	implementation("com.querydsl:querydsl-apt:${querydslVer}")
	def querydslDir = '$buildDir/generated/querydsl'

	//openvidu
	implementation('io.openvidu:openvidu-java-client:2.20.0')
}

test {
	useJUnitPlatform()
}
